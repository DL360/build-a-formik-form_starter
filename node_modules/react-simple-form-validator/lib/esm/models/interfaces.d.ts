import defaultMessages from '../messages/defaultMessages';
import defaultRules from '../rules/defaultRules';
export declare type CustomRules = typeof defaultRules & {
    [key: string]: RulesValues;
};
export declare type CustomMessages = typeof defaultMessages;
export interface ValidationProps {
    fieldsRules: FieldsToValidate;
    state: FormState;
    locale?: string;
    rules?: CustomRules;
    messages?: CustomMessages;
    labels?: ErrorLabels;
}
export interface ClassValidationProps extends Omit<ValidationProps, 'state' | 'fieldsRules'> {
    validation: FieldsToValidate;
}
export declare type FormState = {
    [key: string]: any;
};
export declare type ErrorLabels = FormState;
export interface ValidationResult {
    isValid: boolean;
    errors: Errors[];
}
export interface Errors {
    fieldName: string;
    failedRules: string[];
    messages: string[];
}
export interface ValidatorService {
    validate(fields: FieldsToValidate): ValidationResult;
}
export declare type RulesKeys = keyof typeof defaultRules;
export declare type RulesValues = typeof defaultRules[RulesKeys];
export declare type FieldsToValidate = {
    [field: string]: RuleObject & {
        [key: string]: RuleValue;
    };
};
export declare type RuleObject = {
    [key in RulesKeys]?: RuleValue;
};
export declare type RuleValue = number | string | boolean;
export declare type RuleMessage = Record<RulesKeys, string>;
export declare type RuleFunction = (rule: string | number, value: string) => boolean;
