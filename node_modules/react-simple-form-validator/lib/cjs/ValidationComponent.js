"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var defaultMessages_1 = __importDefault(require("./messages/defaultMessages"));
var defaultRules_1 = __importDefault(require("./rules/defaultRules"));
var validator_service_1 = require("./services/validator-service");
var error_utils_1 = require("./utils/error-utils");
var ValidationComponent = /** @class */ (function (_super) {
    __extends(ValidationComponent, _super);
    function ValidationComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.errors = [];
        return _this;
    }
    ValidationComponent.prototype.validate = function (newState, fieldRules) {
        var _a, _b, _c, _d;
        if (fieldRules === void 0) { fieldRules = this.props.validation; }
        this.validatorService = new validator_service_1.ValidatorServiceImpl(__assign(__assign({}, this.state), newState), (_a = this.props.locale) !== null && _a !== void 0 ? _a : 'en', // ex: en, fr
        (_b = this.props.rules) !== null && _b !== void 0 ? _b : defaultRules_1.default, (_c = this.props.messages) !== null && _c !== void 0 ? _c : defaultMessages_1.default, (_d = this.props.labels) !== null && _d !== void 0 ? _d : {});
        var result = this.validatorService.validate(fieldRules);
        this.errors = result.errors;
        this.isFormValid = result.isValid;
        this.setState(newState);
    };
    ValidationComponent.prototype.isFieldInError = function (fieldName) {
        return error_utils_1.ErrorUtils.isFieldInError(this.errors, fieldName);
    };
    ValidationComponent.prototype.getFailedRules = function () {
        return error_utils_1.ErrorUtils.getFailedRules(this.errors);
    };
    ValidationComponent.prototype.getFailedRulesInField = function (fieldName) {
        return error_utils_1.ErrorUtils.getFailedRulesInField(this.errors, fieldName);
    };
    ValidationComponent.prototype.getErrorMessages = function (separator) {
        if (separator === void 0) { separator = '\n'; }
        return error_utils_1.ErrorUtils.getErrorMessages(this.errors, separator);
    };
    ValidationComponent.prototype.getErrorsForField = function (fieldName) {
        return error_utils_1.ErrorUtils.getErrorsForField(this.errors, fieldName);
    };
    ValidationComponent.prototype.getErrorsInField = function (fieldName) {
        return error_utils_1.ErrorUtils.getErrorsInField(this.errors, fieldName);
    };
    return ValidationComponent;
}(react_1.Component));
exports.default = ValidationComponent;
