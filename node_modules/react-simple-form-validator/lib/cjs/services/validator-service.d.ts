import { CustomMessages, CustomRules, ErrorLabels, FieldsToValidate, FormState, ValidationResult, ValidatorService } from '../models/interfaces';
/**
 * Class which contains the form validation logic.
 */
export declare class ValidatorServiceImpl implements ValidatorService {
    private state;
    private locale;
    private ruleList;
    private messageList;
    private labels;
    private errors;
    private messages;
    constructor(state: FormState, locale: string, ruleList: CustomRules, messageList: CustomMessages, labels: ErrorLabels);
    /**
     * Method used to validate a concrete form state with a specific validation.
     * @param fields - fields with custom validation
     * @returns - form validation result object
     */
    validate(fields: FieldsToValidate): ValidationResult;
    /**
     * Use tod check rules associated to a form field.
     * @param fieldName - form field name
     * @param rules - rules associated to field
     * @param value - current form value
     */
    private checkRules;
    /**
     * Used to update errors.
     * @param fieldName - form field name
     * @param rule - rules associated to field
     * @param value - current form value
     */
    private addError;
    /**
     * Used to reset errors
     */
    private resetErrors;
    /**
     * Check if form is valid
     * @returns - form validity
     */
    private isFormValid;
}
