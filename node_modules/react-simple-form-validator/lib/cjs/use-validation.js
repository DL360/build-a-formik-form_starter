"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var defaultMessages_1 = __importDefault(require("./messages/defaultMessages"));
var defaultRules_1 = __importDefault(require("./rules/defaultRules"));
var validator_service_1 = require("./services/validator-service");
var error_utils_1 = require("./utils/error-utils");
var useValidation = function (props) {
    var _a, _b, _c, _d;
    var isFormValid = false;
    var errors = [];
    var _e = props.state, state = _e === void 0 ? {} : _e;
    var fieldRules = props.fieldsRules;
    var locale = (_a = props.locale) !== null && _a !== void 0 ? _a : 'en';
    var baseRules = (_b = props.rules) !== null && _b !== void 0 ? _b : defaultRules_1.default;
    var messages = (_c = props.messages) !== null && _c !== void 0 ? _c : defaultMessages_1.default;
    var labels = (_d = props.labels) !== null && _d !== void 0 ? _d : {};
    var validatorService = new validator_service_1.ValidatorServiceImpl(state, locale, baseRules, messages, labels);
    // function component is re-rendered if props or any use state vars is updated, so we trigger validation on each updates
    var result = validatorService.validate(fieldRules);
    errors = result.errors;
    isFormValid = result.isValid;
    var isFieldInError = function (fieldName) { return error_utils_1.ErrorUtils.isFieldInError(errors, fieldName); };
    var getFailedRules = function () { return error_utils_1.ErrorUtils.getFailedRules(errors); };
    var getErrorsForField = function (fieldName) { return error_utils_1.ErrorUtils.getErrorsForField(errors, fieldName); };
    var getErrorsInField = function (fieldName) { return error_utils_1.ErrorUtils.getErrorsInField(errors, fieldName); };
    var getErrorMessages = function (separator) {
        if (separator === void 0) { separator = '\n'; }
        return error_utils_1.ErrorUtils.getErrorMessages(errors, separator);
    };
    var getFailedRulesInField = function (fieldName) { return error_utils_1.ErrorUtils.getFailedRulesInField(errors, fieldName); };
    return {
        isFormValid: isFormValid,
        isFieldInError: isFieldInError,
        getFailedRules: getFailedRules,
        getFailedRulesInField: getFailedRulesInField,
        getErrorMessages: getErrorMessages,
        getErrorsForField: getErrorsForField,
        getErrorsInField: getErrorsInField
    };
};
exports.default = useValidation;
